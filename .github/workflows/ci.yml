name: "ci"

on:
  push:
    branches:
      - develop
    paths:
      - 'src/**'
  pull_request:
    branches:
      - develop
    paths:
      - 'src/**'

env:
  NAME: sortes-dev
  DEPLOY_BRANCH: 'refs/heads/develop'
  NODE_VERSION: "14.17.1"

jobs:
  build:
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest

    steps:
      - name: checkout to branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: setup node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: install gitversion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: execute gitversion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml

      - name: install deps
        run: npm ci

      - name: run unit tests
        run: npm t

      - name: write version to project
        run: |
          NEXT_VERSION=${{ steps.gitversion.outputs.MajorMinorPatch }}
          echo "NEXT_VERSION=v$NEXT_VERSION"
          git checkout ${GITHUB_HEAD_REF#refs/heads/} && git pull origin ${GITHUB_HEAD_REF#refs/heads/}

          FILE=./package.json
          MODIFIED_FILE_CONTENTS=`node -e "const data = require('$FILE'); let modifiedData = { ...data, version: '$NEXT_VERSION' }; console.log(JSON.stringify(modifiedData, undefined, 2))"`
          echo $MODIFIED_FILE_CONTENTS > $FILE

          FILE=./package-lock.json
          MODIFIED_FILE_CONTENTS=`node -e "const data = require('$FILE'); let modifiedData = { ...data, version: '$NEXT_VERSION' }; console.log(JSON.stringify(modifiedData, undefined, 2))"`
          echo $MODIFIED_FILE_CONTENTS > $FILE

          git config --global user.name "Github Actions" && git config --global user.email "noreply@github.com"
          git add package*
          {
            git commit -m "[skip ci] bump version to $NEXT_VERSION" &&
            git push origin ${GITHUB_HEAD_REF#refs/heads/}
            echo finished writing new version
          } || {
            echo no new version detected
          }

      - name: build artifact tar file
        run: tar cvf out.tar.gz src/** package*

      - name: upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ format('{0}-v{1}.tar.gz', env.NAME, steps.gitversion.outputs.MajorMinorPatch) }}
          path: out.tar.gz

      - name: tag the build
        if: ${{ github.ref == env.DEPLOY_BRANCH }}
        run: git tag ${{ format('v{0}', steps.gitversion.outputs.MajorMinorPatch) }} && git push origin ${{ format('v{0}', steps.gitversion.outputs.MajorMinorPatch) }}
